@using Wiggly
@namespace Wiggly.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using DevExtreme.AspNet.Mvc
@model Wiggly.Entities.Schedules;

@{
    ViewData["Title"] = "Profile";
    Layout = "_LayoutAdminLTEFarmerDashboard";
}


<style>
    .section {
        padding: 100px 0;
        position: relative;
    }

    .gray-bg {
        /*     background-color: #f5f5f5; */
    }

    .about-avatar img {
        max-width: 100%;
    }

    .about-avatar img {
        vertical-align: middle;
        border-style: none;
    }
    /* About Me
    ---------------------*/
    .about-text h3 {
        font-size: 45px;
        font-weight: 700;
        margin: 0 0 6px;
    }

    .about-text h6 {
        font-weight: 600;
        margin-bottom: 15px;
    }

    .about-text p {
        font-size: 18px;
        max-width: 450px;
    }

        .about-text p mark {
            font-weight: 600;
            color: #20247b;
        }

    .about-list {
        padding-top: 10px;
    }

        .about-list .media {
            padding: 5px 0;
        }

        .about-list label {
            color: #20247b;
            font-weight: 600;
            width: 88px;
            margin: 0;
            position: relative;
        }

            .about-list label:after {
                content: "";
                position: absolute;
                top: 0;
                bottom: 0;
                right: 11px;
                width: 1px;
                height: 12px;
                background: #20247b;
                -moz-transform: rotate(15deg);
                -o-transform: rotate(15deg);
                -ms-transform: rotate(15deg);
                -webkit-transform: rotate(15deg);
                transform: rotate(15deg);
                margin: auto;
                opacity: 0.5;
            }

        .about-list p {
            margin: 0;
            font-size: 15px;
        }


    .about-section .counter {
        padding: 22px 20px;
        background: #ffffff;
        border-radius: 10px;
        box-shadow: 0 0 30px rgba(31, 45, 61, 0.125);
    }

        .about-section .counter .count-data {
            margin-top: 10px;
            margin-bottom: 10px;
        }

        .about-section .counter .count {
            font-weight: 700;
            color: #20247b;
            margin: 0 0 5px;
        }

        .about-section .counter p {
            font-weight: 600;
            margin: 0;
        }

    mark {
        background-image: linear-gradient(rgba(252, 83, 86, 0.6), rgba(252, 83, 86, 0.6));
        background-size: 100% 3px;
        background-repeat: no-repeat;
        background-position: 0 bottom;
        background-color: transparent;
        padding: 0;
        color: currentColor;
    }

    .theme-color {
        color: #fc5356;
    }

    .dark-color {
        color: #20247b;
    }


    .image-container {
        overflow: auto;
    }

    ul {
        text-align: left;
        display: flex;
    }

    li {
        list-style: none;
        display: inline-block; /*pour limiter l'espace occupé   par l'image li*/
    }

    article {
        position: relative;
    }

        article button {
            position: absolute;
            right: 20px;
            top: 5px;
        }

    figure img {
        width: 150px;
        height: 150px;
        display: block;
        object-fit: cover;
    }

    figure {
        /*background: #7D5976;*/
        text-align: center;
        padding: 10px;
        margin: 10px;
    }

    a {
        color: white;
        text-decoration: none;
    }

        a:hover {
            text-decoration: none;
            color: pink;
        }

    span.description {
        padding: 10px;
        display: block;
    }

</style>

@(Html.DevExtreme().Popup()
    .ID("addPostPopup")
    .Title("Appointment info")
    .Width(700)
    .Height(600)
    .ContentTemplate(new TemplateName("customPopupContentTemplate"))
    .ToolbarItems(items =>
    {
        items.Add()
            .Widget(editor => editor.Button()
                .Text("Confirm")
                .Type(ButtonType.Success)
            .OnClick("onConfirmClick")
            )
            .Location(ToolbarItemLocation.After)
            .Toolbar(Toolbar.Bottom);
        items.Add()
            .Widget(editor => editor.Button()
                .Text("Cancel")
                .Type(ButtonType.Success)
            .OnClick("onCancelClick")
            )
            .Location(ToolbarItemLocation.After)
            .Toolbar(Toolbar.Bottom);

    })
    .DragEnabled(true)
    .CloseOnOutsideClick(false)
    .ShowCloseButton(true)
    .OnInitialized("onPopupInitialized")
)


@using (Html.DevExtreme().NamedTemplate("customPopupContentTemplate"))
{
    @(Html.DevExtreme().Form<Wiggly.Entities.Profiles>()
        .ID("formDetails")
        .ColCount(2)
        .ActiveStateEnabled(false)
        .LabelLocation(FormLabelLocation.Top)
        .MinColWidth(300)
        .ShowValidationSummary(true)
        .ReadOnly(false)
        .ScrollingEnabled(true)
        .ActiveStateEnabled(false)
        .Items(items =>
        {
            items.AddGroup().ColCount(2).ColSpan(2).Items(gItem =>
            {
                gItem.AddSimpleFor(m => m.Title).Name("Name/Farm Name").Editor(e => e.TextArea().Height(40)).ColSpan(2).IsRequired(true);
                gItem.AddSimpleFor(m => m.Description).Name("Description").Editor(e => e.TextArea().Height(60)).ColSpan(2).IsRequired(true);

            });

            items.AddGroup()
            //.Caption("Photos")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                //groupItems.AddSimple().Name("Image").DataField("Image").ColSpan(2).Template(new TemplateName("FileUploadTemplate"));
                groupItems.AddSimple()
                .Name("Image")
                .DataField("Image")
                .ColSpan(2)
                .Template(@<text>

                    <div class="widget-container">
                    @(Html.DevExtreme().FileUploader()
                        .ID("file-uploader")
                        .Name("myFile")
                        .Multiple(false)
                        .Accept("*")
                        .UploadMode(FileUploadMode.Instantly)
                        .UploadUrl(Url.Action("Upload", "FileUploader", new {area = "Vendor" }))
                        .OnValueChanged("fileUploader_valueChanged")
                    )
                        <div class="content" id="selected-files">

                        </div>
                    </div>
                </text>);
            });

        })
        .ShowColonAfterLabel(true).Visible(true).OnInitialized("onFormInitialized")
    )
}



<section class="section about-section gray-bg" id="about">
    <div class="container">
        <div class="row align-items-center flex-row-reverse">
            <div class="col-lg-8">
                <div class="about-text go-to">
                    <h6 class="dark-color">Farmer Information  <i class="fas fa-edit profile-edit"></i></h6>
                    <h6 class="theme-color lead">Farmer Name</h6>
                    <p>
                        farmer infor goes here
                    </p>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="about-avatar">
                    <img style="height: 400px; width: 400px; object-fit: cover;" src="https://bootdey.com/img/Content/avatar/avatar7.png" title="" alt="">
                </div>
            </div>
        </div>
    </div>
</section>


<template id="postFormImagesTemplate">
    <li>
        <article>
            <button type="button" class="close image-delete" data-dismiss="modal" aria-label="Close">
                @*<span aria-hidden="true">&times;</span>*@
            </button>
            <a href="">
                <figure>

                    <img src="http://www.awwwards.com/awards/images/2013/07/bootstrap-resources-cover2.jpg" alt="">
                </figure>
            </a>
        </article>
    </li>
</template>

<script>
    var popup, form, fileUploader;
    var pId;
    var postImage;
    var postImages = [];
    var profileInfo;

    //custom form initialization
    function onFormInitialized(e) {
        form = e.component;
    }

    //Custom popUpInitialization
    function onPopupInitialized(e) {
        popup = e.component;
    }

    //popup close
    function onCancelClick() {
        popup.hide();
    }

    //save button click
    function onConfirmClick() {
        let data = form.option("formData");
        console.table(data);
        var validationResult = form.validate();
        if (validationResult.isValid) {
            $.ajax({
                method: "POST",
                url: "/farmer/ProfileAPI/PostInfo",
                data: {
                    values: JSON.stringify(data),
                    pp: JSON.stringify(postImage)
                }
            }).done(function () {
                //console.log("postSaved");
             /*   loadItems();*/
                popup.hide();
                loadProfileInformation()

            }).fail(function (data) {
                console.log("error");
                console.log(data);
            });
        }
    }

    function loadProfileInformation() {
        $.ajax({
            url: "/farmer/ProfileAPI/GetInfo"
        }).done(function (data) {
            console.log(data);
            if (data != null) {
                document.querySelector(".about-avatar img").setAttribute("src", data.ProfilePic);
                document.querySelector(".about-text .lead").innerHTML = data.Title;
                document.querySelector(".about-text p").innerHTML = data.Description;

            }
        });
    }

    $(document).ready(function () {
        loadProfileInformation();

        $("body").on("click", ".profile-edit", function (event) {

            $.ajax({
                url: "/farmer/ProfileAPI/GetInfo"
            }).done(function (data) {
                console.log(data);
                if (data != null) {
                    popup.option("visible", true);
                    form.option('formData', data);
                    postImage = { ImagePath: data.ProfilePic };
                    postImages.push(postImage);
                    loadImageListToPopup();
                } else {
                    popup.option("visible", true);
                }
               
            });
            //popup.option("visible", true);

        });

        //dx-fileuploader-files-container
        var domModificationCounter = 0;
        $("body").on('DOMSubtreeModified', '.dx-fileuploader-file-status-message', function () {

            if ($(".dx-fileuploader-file-status-message").text() == "Uploaded") {
                afterUpload();
                console.log(postImages);
            } else {
            }
        });
    });

    //if file upload data values was changed
    function fileUploader_valueChanged(e, t, d) {
        var files = e.value;
        e.component.option("onUploaded", "onUploaded");
        var result = e.component.option("uploadUrl", "/Farmer/FileUploader/UploadProfilePic");

        if (files.length > 0) {
            $("#selected-files .selected-item").remove();

            //TODO: show the uploaded images

        }
        else
            $("#selected-files").hide();
    }


    function afterUpload() {
        $.ajax({
            url: "/Farmer/FileUploader/GetUploadProfilePic"
        }).done(function (data) {
            postImage = { ImagePath: data };
            postImages.push(postImage);
            loadImageListToPopup();
        });
    }


    /*
    * function responsible on loading imagelist when the pop up to edit the post was shown
    */
    function loadImageListToPopup() {
        let parent = document.querySelector("#selected-files.content");
        let postImagesTemplate = document.querySelector('template#postFormImagesTemplate');
        parent.innerHTML = "";

        if (postImages.length > 0) {
            //$.each(postImage, function (i, image) {
                var image = postImages[postImages.length -1];
                let imageClone = postImagesTemplate.content.cloneNode(true);

                let img = imageClone.querySelector("li article a figure img");
                let a = imageClone.querySelector("li article a");
                let button = imageClone.querySelector("li article button");

                img.setAttribute("src", image.ImagePath);
                a.setAttribute("href", image.ImagePath);
                button.setAttribute("data-value", image.ImageId)
                parent.append(imageClone);
            //});
        }

    }

</script>