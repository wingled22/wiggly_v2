@using Wiggly
@namespace Wiggly.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using DevExtreme.AspNet.Mvc
@model Wiggly.Entities.Transaction;
@{
    ViewData["Title"] = "Index";
    Layout = "_LayoutAdminLTEVendor";
}


<h1>Transaction</h1>

<p>
    <a asp-action="Index">Home Vendor</a>
</p>


@(Html.DevExtreme().DataGrid<Wiggly.Areas.Vendor.Models.TransactionInfoViewModel>()
    .DataSource(ds => ds.Mvc()
        .Controller("Transaction")
        .LoadAction("GetTransactions")
        .InsertAction("PostTransaction")
        .UpdateAction("PutTransaction")
        //.DeleteAction("DeleteTransactions")
        .Key("TransactionID")
    )
    .Selection(s => s.Mode(SelectionMode.Single))
    .HoverStateEnabled(true)
    .ShowColumnLines(true)
    .ShowRowLines(true)
    .RowAlternationEnabled(true)
    .ShowBorders(true)
    .SearchPanel(searchPanel => searchPanel
        .Visible(true)
        .Width(240)
        .Placeholder("Search...")
    )
    .Columns(col =>
    {
        col.AddFor(m => m.TransactionID).Name("Transaction ID");
        col.AddFor(m => m.Farmer)
            .Lookup(lookup => lookup.DataSource(d => d.Mvc()
                .Controller("Transaction")
                .LoadAction("GetFarmers")
                .Key("Id")
            ).DisplayExpr(new JS("FarmerDisplayExpr"))
            .ValueExpr("Id")
            ); 
        col.AddFor(m => m.BookDate);

        //kilos
        col.AddFor(m => m.Pork).Visible(false);
        col.AddFor(m => m.PorkNum).Visible(false);
        col.AddFor(m => m.Beef).Visible(false);
        col.AddFor(m => m.BeefNum).Visible(false);
        col.AddFor(m => m.Chicken).Visible(false);
        col.AddFor(m => m.ChickenNum).Visible(false);
        col.AddFor(m => m.Goat).Visible(false);
        col.AddFor(m => m.GoatNum).Visible(false);
        col.AddFor(m => m.Carabao).Visible(false);
        col.AddFor(m => m.CarabaoNum).Visible(false);

        //payment

        col.AddFor(m => m.PaymentType).Visible(false);
        col.AddFor(m => m.Amount).Visible(false);

        col.Add()
            .Type(GridCommandColumnType.Buttons)
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit);
                b.Add().Name(GridColumnButtonName.Delete);
                //b.Add().Name("Details")
                //    .Icon("info")
                //    .OnClick("onInfoIconClick")
                //;
                //b.Add().Name("ViewTopic")
                //    .Icon("doc")
                //    .OnClick("onTopicIconClick");
                //;

            });
    })
    .Editing(e => {
        e.UseIcons(true);
        e.Mode(GridEditMode.Popup)
        //.Popup(p => p
        //    .Title("Transaction Info")
        //    .ShowTitle(true)
        //    .Width(700)
        //    .Height(525)
        //)
        .AllowAdding(true)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .Form(f => f.Items(items =>
        {
            items.AddGroup()
                .ColCount(2)
                .ColSpan(2)
                .Caption("Transaction")
                .Items(gItem =>
                {
                    gItem.AddSimpleFor(m => m.Farmer).ColSpan(1).IsRequired(true)
                        .Editor(e => e.SelectBox()
                            .DataSource(ds => ds.Mvc()
                                .Controller("Transaction")
                                .LoadAction("GetFarmers")
                            )
                            //.ItemTemplate(new JS("ItemTemplate"))
                            .DisplayExpr(new JS("FarmerDisplayExpr"))
                            .ValueExpr("Id")
                            .SearchEnabled(true)
                            .Placeholder("Select Farmer")
                          );

                    gItem.AddSimpleFor(m => m.BookDate).Editor(e => e.DateBox().Type(DateBoxType.DateTime)).ColSpan(1).IsRequired(true);
                });

            items.AddGroup()
                .ColCount(2)
                .ColSpan(2)
                .Caption("Kilos")
                .Items(gItem => {

                    gItem.AddSimpleFor(m => m.PorkNum).Editor(e => e.NumberBox()).ColSpan(1);
                    gItem.AddSimpleFor(m => m.Pork).Editor(e => e.NumberBox()).ColSpan(1);

                    gItem.AddSimpleFor(m => m.BeefNum).Editor(e => e.NumberBox()).ColSpan(1);
                    gItem.AddSimpleFor(m => m.Beef).Editor(e => e.NumberBox()).ColSpan(1);

                    gItem.AddSimpleFor(m => m.ChickenNum).Editor(e => e.NumberBox()).ColSpan(1);
                    gItem.AddSimpleFor(m => m.Chicken).Editor(e => e.NumberBox()).ColSpan(1);

                    gItem.AddSimpleFor(m => m.GoatNum).Editor(e => e.NumberBox()).ColSpan(1);
                    gItem.AddSimpleFor(m => m.Goat).Editor(e => e.NumberBox()).ColSpan(1);

                    gItem.AddSimpleFor(m => m.Carabao).Editor(e => e.NumberBox()).ColSpan(1);
                    gItem.AddSimpleFor(m => m.Carabao).Editor(e => e.NumberBox()).ColSpan(1);


                });

            items.AddGroup()
                .ColCount(1)
                .ColSpan(1)
                .Caption("Payment")
                .Items(gItem => {
                    gItem.AddSimpleFor(m => m.PaymentType).ColSpan(1).IsRequired(true).Editor(e => e.SelectBox().Placeholder("Select Status").DataSource(new JS("PaymentType")).DisplayExpr("Name").ValueExpr("Name"));
                    gItem.AddSimpleFor(m => m.Amount).ColSpan(1).IsRequired(true).Editor(e => e.NumberBox());
                });

        }).OnInitialized("onFormInitialized")
        );

    })
)



<script>
    var asdfasdf;
    var Status = [
        {
            "Name": "Pending"
        },
        {
            "Name": "Done"
        },
        {
            "Name": "Cancelled"
        }
    ];

    var PaymentType = [
        {
            "Name": "Bank Deposit"
        },
        {
            "Name": "Gcash"
        },
        {
            "Name": "Cash on Hand"
        }
    ];

    //ui components init
    var farmerSelectBox;

    let form;
    //custom form initialization
    function onFormInitialized(e) {
        form = e.component;
        console.log(form);
    }


    $.ajax("../Transaction/GetFarmers").done(function (data) {
        asdfasdf = data;
    });

    function ItemTemplate(data) {
        return data.Firstname + " " + data.LastName;
    }

    
    function FarmerDisplayExpr(item) {
        if (item) {
            //console.log(item);
            return item.Firstname + " " + item.LastName;
        } else {
        }
    }


    let dExpr = (item) => function () {
        if (item) {
            //console.log(item);
            return item.Firstname + " " + item.LastName;
        } else {
            console.log("no data")
        }
    }

</script>